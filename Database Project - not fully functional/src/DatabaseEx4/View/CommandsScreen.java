/***
 * Caleb Shere 2493276919
 * Benjamin Wexler 337955744
 * Liron Cohen 305610255
 * Adi Shlomo 308192806
 ***/

package DatabaseEx4.View;

import DatabaseEx4.Model.DML;
import DatabaseEx4.Model.ErrorInfo;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JTable;

/**
 *
 * The screen where the user enters queries and interacts with the database
 */
public class CommandsScreen extends javax.swing.JFrame {
    private String url;
    private String username;
    private String password;
    private final JFrame main;
    private DML dml;

    /**
     * Creates new form CommandsScreen
     * @param mainMenu - the main menu JFrame to return to when the user presses
     *                   "Go back"
     */
    public CommandsScreen(JFrame mainMenu) {
        try (BufferedReader reader = new BufferedReader(new FileReader("conf.txt"))) {
            url = reader.readLine();
            username = reader.readLine();
            password = reader.readLine();
            dml = new DML();

        } catch (IOException e) {
            System.out.println("Error reading from configuration file");
            e.printStackTrace();
        }
        initComponents();
        scrollPane.setVisible(false);
        main = mainMenu;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        Input = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        Output = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Input");

        jLabel3.setText("Output");

        jButton1.setText("Execute");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                executeCommand(evt);
            }
        });

        jButton2.setText("Run Script");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runScript(evt);
            }
        });

        jButton3.setText("Go Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goBack(evt);
            }
        });

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 525, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel3)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Input, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Output, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * 
     * @param comm - the SQL query entered by the user
     * @return - an ErrorInfo object that tells if there was an error, as well
     *           as the command that caused the error. This return value is used
     *           only when running a script.
     */
    private ErrorInfo executeSQL(String comm) {
        // This will be instantiated if an error occurs
        ErrorInfo info = null;
        // BONUS! Check that the reserved words are uppercase
        if (!dml.checkLowerCase(comm)) {
            Output.setText("WRONG QUERY STRUCTURE");
        } else {
            try {
                Connection conn = DriverManager.getConnection(url, username, password);
                Statement stmnt = conn.createStatement();
                boolean set = stmnt.execute(comm);
                // If there is a ResultSet, make a table
                if (set) {
                    ResultSet rs = stmnt.getResultSet();
                    ResultSetMetaData meta = rs.getMetaData();
                    int cols = meta.getColumnCount();
                    String[] headers = new String[cols];
                    for (int i = 0; i < cols; i++) {
                        headers[i] = meta.getColumnName(i + 1);
                    }
                    
                    rs.last();
                    int rows = rs.getRow();
                    rs.beforeFirst();
                    String[][] rowData = new String[rows][cols];
                    for (int i = 0; i < rows; i++) {
                        rs.next();
                        for (int j = 0; j < cols; j++) {
                            rowData[i][j] = rs.getString(j + 1);
                        }
                    }
                    table = new JTable(rowData, headers);
                    scrollPane.setViewportView(table);
                    table.setFillsViewportHeight(true);
                    Output.setText("");
                    scrollPane.setVisible(true);
                    getContentPane().validate();
                    getContentPane().repaint();
                } else { // No resultset, no table
                    scrollPane.setVisible(false);
                    Output.setText("OPERATION SUCCESSFUL");
                } 
            } catch (SQLException ex) {
                // If we're running a script, return the error object with the command
                info = new ErrorInfo(true, comm);
                scrollPane.setVisible(false);
                String err = ex.getSQLState();
                // Syntax error
                if (err.equals("42000")) {
                    Output.setText("WRONG QUERY STRUCTURE");
                } else { // Logical error
                    Output.setText("LOGICAL ERROR");
                }
            }
        }
        // Null if there was no error
        return info;
    }
    
    /**
     * This function is called when the user presses the "Execute" button
     * @param evt 
     */
    private void executeCommand(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_executeCommand
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CommandsScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
        executeSQL(Input.getText());
    }//GEN-LAST:event_executeCommand
    
    /**
     * This function is called when the user presses the "Run Script" button
     * @param evt 
     */
    private void runScript(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runScript
        ErrorInfo info;
        String file = Input.getText();
        if (file.equals("")) {
            Output.setText("NO FILE NAME ENTERED");
        } else {
            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
                String command = reader.readLine();
                while (command != null) {
                    info = executeSQL(command);
                    // If there was an error...
                    if (info != null && info.isError()) {
                        Output.setText(Output.getText() + ": \"" + info.getErrorCommand() + "\"");
                        break;
                    }
                    command = reader.readLine();
                }
            } catch (IOException e) {
                Output.setText("ERROR READING FROM FILE");
            }
        }
    }//GEN-LAST:event_runScript
    
    /**
     * This function is called when the user presses the "Go Back" button
     * @param evt 
     */
    private void goBack(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goBack
        // Delete this JFrame
        this.dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                // Show the main menu
                main.setVisible(true);
            }
        });
    }//GEN-LAST:event_goBack

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Input;
    private javax.swing.JTextField Output;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
